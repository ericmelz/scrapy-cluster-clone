# This workflow will build scrapy-cluster dockerfiles and push them to ecr
name: Scrapy Cluster CI

on:
  push:
    branches:
    - kompose
    paths-ignore:
    - helm/crawler/environments/ci/version.yaml
    - helm/crawler/environments/dev/version.yaml

jobs:
  build-eric-crawler:

    runs-on: ubuntu-latest
    env:
      SKIP_STEPS: false  # Set this to false to run all steps
  
    steps:
    - name: Get short SHA
      id: short-sha
      run: echo "::set-output name=sha7::$(echo $GITHUB_SHA | cut -c1-7)"

    - uses: actions/checkout@v2

    - name: test output
      run: echo "short sha is ${{steps.short-sha.outputs.sha7}}"

    - name: Build and Push Docker Image to ecr
      if: env.SKIP_STEPS != 'true'
      uses: mr-smithers-excellent/docker-build-push@v6
      with:
        image: eric-crawler
        dockerfile: docker/crawler/Dockerfile.py3
        registry: 638173936794.dkr.ecr.us-east-1.amazonaws.com
        tags: ${{ steps.short-sha.outputs.sha7 }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  build-eric-kafka-monitor:

    runs-on: ubuntu-latest
    env:
      SKIP_STEPS: false  # Set this to false to run all steps
  
    steps:
    - name: Get short SHA
      id: short-sha
      run: echo "::set-output name=sha7::$(echo $GITHUB_SHA | cut -c1-7)"

    - uses: actions/checkout@v2

    - name: Build and Push Docker Image to ecr
      if: env.SKIP_STEPS != 'true'
      uses: mr-smithers-excellent/docker-build-push@v6
      with:
        image: eric-kafka-monitor
        dockerfile: docker/kafka-monitor/Dockerfile.py3
        registry: 638173936794.dkr.ecr.us-east-1.amazonaws.com
        tags: ${{ steps.short-sha.outputs.sha7 }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  build-eric-redis-monitor:

    runs-on: ubuntu-latest
    env:
      SKIP_STEPS: false  # Set this to false to run all steps
  
    steps:
    - name: Get short SHA
      id: short-sha
      run: echo "::set-output name=sha7::$(echo $GITHUB_SHA | cut -c1-7)"

    - uses: actions/checkout@v2

    - name: Build and Push Docker Image to ecr
      if: env.SKIP_STEPS != 'true'
      uses: mr-smithers-excellent/docker-build-push@v6
      with:
        image: eric-redis-monitor
        dockerfile: docker/redis-monitor/Dockerfile.py3
        registry: 638173936794.dkr.ecr.us-east-1.amazonaws.com
        tags: ${{ steps.short-sha.outputs.sha7 }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  build-eric-crawler-rest:

    runs-on: ubuntu-latest
    env:
      SKIP_STEPS: false  # Set this to false to run all steps
  
    steps:
    - name: Get short SHA
      id: short-sha
      run: echo "::set-output name=sha7::$(echo $GITHUB_SHA | cut -c1-7)"

    - uses: actions/checkout@v2

    - name: Build and Push Docker Image to ecr
      if: env.SKIP_STEPS != 'true'
      uses: mr-smithers-excellent/docker-build-push@v6
      with:
        image: eric-crawler-rest
        dockerfile: docker/rest/Dockerfile.py3
        registry: 638173936794.dkr.ecr.us-east-1.amazonaws.com
        tags: ${{ steps.short-sha.outputs.sha7 }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


  build-datadoggie:

    runs-on: ubuntu-latest
    env:
      SKIP_STEPS: false  # Set this to false to run all steps

    steps:
    - name: Get short SHA
      id: short-sha
      run: echo "::set-output name=sha7::$(echo $GITHUB_SHA | cut -c1-7)"

    - uses: actions/checkout@v2

    - name: Build and Push Docker Image to ecr
      if: env.SKIP_STEPS != 'true'
      uses: mr-smithers-excellent/docker-build-push@v6
      with:
        image: datadoggie
        dockerfile: docker/datadoggie/Dockerfile.py3
        registry: 638173936794.dkr.ecr.us-east-1.amazonaws.com
        tags: ${{ steps.short-sha.outputs.sha7 }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


  record-ci-version:
    needs: [build-eric-kafka-monitor, build-eric-redis-monitor, build-eric-crawler-rest, build-eric-crawler, build-datadoggie]
    runs-on: ubuntu-latest

    steps:
    - name: Get short SHA
      id: short-sha
      run: echo "::set-output name=sha7::$(echo $GITHUB_SHA | cut -c1-7)"

    - uses: actions/checkout@v3

    - name: Configure Git
      run: |
        git config --global user.name 'Github Actions (eric)'
        git config --global user.email 'eric@emelz.com'

    - name: write sha
      run: |
        echo "writing sha ${{ steps.short-sha.outputs.sha7 }}"
        echo "version: ${{ steps.short-sha.outputs.sha7 }}" > helm/crawler/environments/ci/version.yaml
        git config --global user.name 'Github Actions (eric)'
        git config --global user.email 'eric@emelz.com'
        git add helm/crawler/environments/ci/version.yaml
        git commit -m "Updated version with SHA"
        git push origin kompose

  deploy-crawler-to-ci:
    needs: [record-ci-version]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kube config
      run: aws eks update-kubeconfig --name ci-eks-cluster   

    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: 'v3.13.2'

    - name: Deploy Helm Chart
      run: |
        helm upgrade --install ci-crawler ./helm/crawler --namespace default --wait --timeout 5m --values ./helm/crawler/environments/ci/version.yaml

  test-crawler-in-ci:
    needs: [deploy-crawler-to-ci]
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.3'
      id: install

    - name: Update kube config
      run: aws eks update-kubeconfig --name ci-eks-cluster   

    - name: Test redis-monitor
      run: |
        kubectl exec deployment/redis-monitor '/usr/src/app/run_docker_tests.sh'

    - name: Test kafka-monitor
      run: |
        kubectl exec deployment/kafka-monitor '/usr/src/app/run_docker_tests.sh'

    - name: Test rest
      run: |
        kubectl exec deployment/rest '/usr/src/app/run_docker_tests.sh'

    - name: Test crawler
      run: |
        kubectl exec deployment/crawler '/usr/src/app/run_docker_tests.sh'

    - name: Tear down
      run: |
        echo "temporarily disabling helm uninstall ci-crawler"


  deploy-crawler-to-dev:
    needs: [test-crawler-in-ci]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: copy sha from ci to dev
      run: |
        cp helm/crawler/environments/ci/version.yaml helm/crawler/environments/dev/version.yaml
        git config --global user.name 'Github Actions (eric)'
        git config --global user.email 'eric@emelz.com'
        git add helm/crawler/environments/dev/version.yaml
        git commit -m "Updated dev version with CI SHA"
        git push origin kompose

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kube config
      run: aws eks update-kubeconfig --name development-eks-cluster   

    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: 'v3.13.2'

    - name: Deploy Helm Chart
      run: |
        helm upgrade --install dev-crawler ./helm/crawler --namespace default --wait --timeout 5m --values ./helm/crawler/environments/dev/version.yaml


  test-crawler-in-dev:
    needs: [deploy-crawler-to-dev]
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.3'
      id: install

    - name: Update kube config
      run: aws eks update-kubeconfig --name development-eks-cluster   

    - name: Test redis-monitor
      run: |
        kubectl exec deployment/redis-monitor '/usr/src/app/run_docker_tests.sh'

    - name: Test kafka-monitor
      run: |
        kubectl exec deployment/kafka-monitor '/usr/src/app/run_docker_tests.sh'

    - name: Test rest
      run: |
        kubectl exec deployment/rest '/usr/src/app/run_docker_tests.sh'

    - name: Test crawler
      run: |
        kubectl exec deployment/crawler '/usr/src/app/run_docker_tests.sh'

    - name: Tear down
      run: |
        echo "temporarily disabling helm uninstall development-crawler"


  deploy-crawler-to-stage:
    needs: [test-crawler-in-dev]
    runs-on: ubuntu-latest
    environment: stage

    steps:
    - uses: actions/checkout@v3
    
    - name: copy sha from dev to stage
      run: |
        cp helm/crawler/environments/dev/version.yaml helm/crawler/environments/stage/version.yaml
        git config --global user.name 'Github Actions (eric)'
        git config --global user.email 'eric@emelz.com'
        git add helm/crawler/environments/stage/version.yaml
        git commit -m "Updated stage version with stage SHA"
        git push origin kompose

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kube config
      run: aws eks update-kubeconfig --name staging-eks-cluster   

    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: 'v3.13.2'

    - name: Deploy Helm Chart
      run: |
        helm upgrade --install stage-crawler ./helm/crawler --namespace default --wait --timeout 5m --values ./helm/crawler/environments/stage/version.yaml


  test-crawler-in-stage:
    needs: [deploy-crawler-to-stage]
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.3'
      id: install

    - name: Update kube config
      run: aws eks update-kubeconfig --name staging-eks-cluster   

    - name: Test redis-monitor
      run: |
        kubectl exec deployment/redis-monitor '/usr/src/app/run_docker_tests.sh'

    - name: Test kafka-monitor
      run: |
        kubectl exec deployment/kafka-monitor '/usr/src/app/run_docker_tests.sh'

    - name: Test rest
      run: |
        kubectl exec deployment/rest '/usr/src/app/run_docker_tests.sh'

    - name: Test crawler
      run: |
        kubectl exec deployment/crawler '/usr/src/app/run_docker_tests.sh'

    - name: Tear down
      run: |
        echo "temporarily disabling helm uninstall staging-crawler"
